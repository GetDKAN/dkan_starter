<?php

/**
 * @file
 * Integrates Recline.js visualization tools.
 */

module_load_include('inc', 'recline', 'recline.field');

/**
 * Implements hook_menu().
 */
function recline_menu() {
  $items = array();

  $items['node/%node/recline-embed'] = array(
    'title' => 'Embed',
    'page callback' => 'recline_embed',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
  );

  return $items;
}

/**
 * Callback function to render the view in a frame.
 */
function recline_embed($node) {

  // Search for a field of type 'recline_field'. Render content of first found.
  $fields_info = field_info_instances('node', $node->type);
  foreach ($fields_info as $field_name => $value) {
    $field_info = field_info_field($field_name);
    $type = $field_info['type'];
    if ($type == 'recline_field') {
      $content = field_view_field('node', $node, $field_name);
      if ($content) {
        print theme('recline_embed', array('title' => $node->title, 'content' => render($content)));
        drupal_exit();
      }
    }
  }

  // If no populated field of type 'recline_field' is found, display 404 page.
  drupal_fast_404();
  drupal_not_found();
}

/**
 * Process variables for embed-html.tpl.php.
 *
 * The $variables array contains the following elements:
 * - content: the rendered content.
 *
 * @see embed-html.tpl.php
 */
function template_preprocess_recline_embed(&$variables) {
  global $base_url, $language;
  $variables['base_url'] = $base_url;
  $variables['language'] = $language;
  $variables['language_dir'] = $language->direction == LANGUAGE_RTL ? 'rtl' : 'ltr';
  $variables['head']     = drupal_get_html_head();
  $variables['css']      = drupal_add_css();
  $variables['styles']   = drupal_get_css();
  $variables['scripts']  = drupal_get_js();
}

/**
 * Implements hook_theme().
 */
function recline_theme() {
  return array(
    'recline_default_formatter' => array(
      'variables' => array('item' => NULL),
      'file' => 'recline.field.inc',
    ),
    'recline_link_formatter' => array(
      'variables' => array('item' => NULL),
      'file' => 'recline.field.inc',
    ),
    'recline_url_formatter' => array(
      'variables' => array('item' => NULL),
      'file' => 'recline.field.inc',
    ),
    'recline_widget' => array(
      'render element' => 'element',
      'file' => 'recline.field.inc',
    ),
    'recline_embed' => array(
      'variables' => array('title' => NULL, 'content' => NULL),
      'template' => 'recline-embed',
    ),
    'recline_embed_button' => array(
      'variables' => array('node' => NULL),
      'template' => 'recline-embed-button',
    ),
  );
}

/**
 * Adds default location if libraries module is not installed or loaded yet.
 */
function _recline_library_path() {
  if (module_exists('libraries')) {
    $library_path = libraries_get_path('recline');
  }
  else {
    $library_path = 'sites/all/libraries/recline';
  }
  return $library_path;
}

/**
 * Implements hook_libraries_info().
 */
function recline_libraries_info() {
  $libraries['recline'] = array(
    'name' => 'Recline',
    'vendor url' => 'http://reclinejs.com',
    'download url' => 'https://github.com/okfn/recline/zipball/master',
    'path' => '',
    'version arguments' => array(
      'file' => 'README.md',
      'pattern' => '@v+([0-9][.][0-9])@',
      'lines' => 49,
    ),
    'files' => array(
      'css' => array(
        'css/grid.css',
        'css/slickgrid.css',
        'css/flot.css',
        'css/transform..css',
        'css/map.css',
        'css/multiview.css',
        'css/site/pygments.css',
        'css/site/site.css',
        'vendor/bootstrap/2.3.2/css/bootstrap.css',
        'vendor/leaflet/0.7.3/leaflet.css',
        'vendor/slickgrid/2.0.1/slick.grid.css',
        'vendor/timeline/20120520/css/timeline.css',
      ),
      'js' => array(
        // The following could interfere with other libraries.
        // TODO: Make option for individual downloads.
        'vendor/underscore/1.4.4/underscore.js',
        'vendor/backbone/1.0.0/backbone.js',
        'vendor/mustache/0.5.0-dev/mustache.js',
        'vendor/bootstrap/2.3.2/bootstrap.js',
        'vendor/leaflet/0.7.3/leaflet.js',
        'vendor/slickgrid/2.0.1/plugins/slick.rowselectionmodel.js',
        'vendor/slickgrid/2.0.1/plugins/slick.rowmovemanager.js',
        'vendor/slickgrid/2.0.1/jquery.event.drag-2.0.min.js',
        'vendor/slickgrid/2.0.1/slick.grid.min.js',
        'vendor/moment/2.0.0/moment.js',
        'vendor/timeline/js/timeline.js',
        'vendor/flot/jquery.flot.js',
        'dist/recline.js',
      ),
    ),
  );
  $libraries['underscore'] = array(
    'name' => 'Underscore',
    'vendor url' => 'http://underscorejs.org',
    'download url' => 'http://underscorejs.org/underscore-min.js',
    'path' => 'underscore/underscore-min.js',
    'version arguments' => array(
      'file' => 'underscore/underscore-min.js',
      'pattern' => '@majorVersion[=:]["\'](\d).+?minorVersion[=:]["\']([\d\.]+)@',
      'lines' => 1,
      'cols' => 100,
    ),
  );
  $libraries['backbone'] = array(
    'name' => 'Backbone',
    'vendor url' => 'http://backbone.org',
    'download url' => 'http://backbone.org/backbone-min.js',
    'path' => 'backbone/backbone-min.js',
    'version arguments' => array(
      'file' => 'backbone/backbone-min.js',
      'pattern' => '@majorVersion[=:]["\'](\d).+?minorVersion[=:]["\']([\d\.]+)@',
      'lines' => 1,
      'cols' => 100,
    ),
  );
  $libraries['mustache'] = array(
    'name' => 'Mustache',
    'vendor url' => 'http://mustache.github.com',
    'download url' => 'http://mustache.github.com',
    'path' => 'mustache/mustache.js',
    'version arguments' => array(
      'file' => 'mustache/mustache.js',
      'pattern' => '@majorVersion[=:]["\'](\d).+?minorVersion[=:]["\']([\d\.]+)@',
      'lines' => 22,
      'cols' => 100,
    ),
  );
  $libraries['bootstrap_transition'] = array(
    'name' => 'Bootstrap Transition',
    'vendor url' => 'http://twitter.github.com/bootstrap',
    'download url' => 'http://twitter.github.com/bootstrap/assets/bootstrap.zip',
    'path' => 'bootstrap/js/transition.js',
    'version arguments' => array(
      'file' => 'backbone/backbone-min.js',
      'pattern' => '@majorVersion[=:]["\'](\d).+?minorVersion[=:]["\']([\d\.]+)@',
      'lines' => 2,
      'cols' => 100,
    ),
    'files' => array(
      'css' => array(
        'docs/assests/css/bootstrap.css',
        'docs/assests/css/bootstrap-responsive.css',
      ),
    ),
  );
  $libraries['flotr2'] = array(
    'name' => 'flotr2',
    'vendor url' => 'https://github.com/HumbleSoftware/Flotr2',
    'download url' => 'https://github.com/HumbleSoftware/Flotr2',
    'path' => 'flotr2/flotr2.js',
    'version arguments' => array(
      'file' => 'flotr2/flotr2.js',
      'pattern' => '@majorVersion[=:]["\'](\d).+?minorVersion[=:]["\']([\d\.]+)@',
      'lines' => 566,
      'cols' => 100,
    ),
  );
  $libraries['leaflet'] = array(
    'name' => 'Leaflet',
    'vendor url' => 'http://leaflet.cloudmade.com',
    'download url' => 'http://leaflet.cloudmade.com/download.html',
    'path' => 'Leaflet/dist/leaflet.js',
    'version arguments' => array(
      'file' => 'Leaflet/dist/leaflet.js',
      'pattern' => '@majorVersion[=:]["\'](\d).+?minorVersion[=:]["\']([\d\.]+)@',
      'lines' => 6,
      'cols' => 100,
    ),
    'files' => array(
      'js' => array(
        'leaflet/spec/after.js',
      ),
      'css' => array(
        'leaflet/dist/leaflet.css',
      ),
    ),
  );
  $libraries['leaflet_markercluster'] = array(
    'name' => 'Leaflet MarkerCluster',
    'vendor url' => 'https://github.com/Leaflet/Leaflet.markercluster',
    'download url' => 'https://github.com/Leaflet/Leaflet.markercluster/archive/c5864dbfca9e71c86ac61b432862cc77f8fd8e68.zip',
    'path' => '',
    'version arguments' => array(
      'file' => 'CHANGELOG.md',
      'pattern' => '@([0-9][.][0-9])@',
      'lines' => 20,
      'cols' => 100,
    ),
    'files' => array(
      'css' => array(
        'dist/MarkerCluster.css',
        'dist/MarkerCluster.Default.css',
      ),
      'js' => array(
        'dist/leaflet.markercluster.js'
      ),
    ),
  );
  $libraries['slickgrid'] = array(
    'name' => 'SlickGrid',
    'vendor url' => 'https://github.com/mleibman/SlickGrid/wiki',
    'download url' => 'https://github.com/mleibman/SlickGrid',
    'path' => 'slickgrid/slick.grid.js',
    'version arguments' => array(
      'file' => 'slickgrid/slick.grid.js',
      'pattern' => '@majorVersion[=:]["\'](\d).+?minorVersion[=:]["\']([\d\.]+)@',
      'lines' => 10,
      'cols' => 100,
    ),
    'files' => array(
      'css' => array(
        'slickgrid/css/slick.grid.css',
      ),
      'js' => array(
        'slickgrid/lib/jquery.event.drag-2.0.min.js',
      ),
    ),
  );

  $libraries['recline_deeplink'] = array(
    'name' => 'Recline DeepLink',
    'vendor url' => 'https://github.com/NuCivic/recline-deeplink',
    'download url' => 'https://github.com/NuCivic/recline-deeplink',
    'path' => '',
    'version' => array(
      'file' => 'bower.js',
      'pattern' => '@+([0-9][.][0-9][.][0-9])@',
      'lines' => 3,
      'cols' => 14,
    ),
    'files' => array(
      'js' => array(
        'dist/recline.deeplink.min.js',
      ),
    ),
  );

  $libraries['deep_diff'] = array(
    'name' => 'Deep Diff',
    'vendor url' => 'https://github.com/flitbit/diff',
    'download url' => 'https://github.com/flitbit/diff',
    'path' => '',
    'version arguments' => array(
      'file' => 'Readme.md',
      'pattern' => '@([0-9][.][0-9][.][0-9])@',
      'lines' => 20,
      'cols' => 100,
    ),
    'files' => array(
      'js' => array(
        'releases/deep-diff-0.3.0.min.js',
      ),
    ),
  );

  return $libraries;
}

/**
 * Discovers extension based off of mimetype.
 *
 * @param string $mimetype
 *   Mimetype to search for.
 *
 * @return string
 *   Extension or mimetype.
 */
function recline_get_data_type($mimetype) {
  include_once DRUPAL_ROOT . '/includes/file.mimetypes.inc';
  $type = '';
  $mapping = file_mimetype_mapping();
  $offset = array_search($mimetype, $mapping['mimetypes']);
  if ($offset) {
    $type = array_search($offset, $mapping['extensions']);
  }
  else {
    $type = $mimetype;
  }
  return $type;
}

/**
 * Returns array of delimiters.
 */
function recline_delimiters() {
  return array(
    ',' => ',',
    ';' => ';',
    '|' => '|',
    '+' => '+',
  );
}


/**
 * Implements hook_file_download().
 */
function recline_file_download($uri, $field_type = 'file') {
  return file_file_download($uri, 'recline_field');
}


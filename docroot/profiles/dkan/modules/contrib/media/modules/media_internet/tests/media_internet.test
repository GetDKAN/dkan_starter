<?php

/**
 * @file
 * Tests for media_internet.module.
 */

/**
 * Provides methods specifically for testing Media Internet module's remote media handling.
 */
class MediaInternetTestHelper extends DrupalWebTestCase {
  function setUp() {
    // Since this is a base class for many test cases, support the same
    // flexibility that DrupalWebTestCase::setUp() has for the modules to be
    // passed in as either an array or a variable number of string arguments.
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }
    $modules[] = 'media_internet';
    parent::setUp($modules);
  }

  /**
   * Get a file from the database based on its filename.
   *
   * @param $filename
   *   A file filename, usually generated by $this->randomName().
   * @param $reset
   *   (optional) Whether to reset the internal file_load() cache.
   *
   * @return
   *   A file object matching $filename.
   */
  function getFileByFilename($filename, $reset = FALSE) {
    $files = file_load_multiple(array(), array('filename' => $filename), $reset);
    // Load the first file returned from the database.
    $returned_file = reset($files);
    return $returned_file;
  }
}

/**
 * Tests the media browser 'Web' tab.
 */
class MediaInternetBrowserWebTabTestCase extends MediaInternetTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'Media browser web tab test',
      'description' => 'Tests the media browser web tab.',
      'group' => 'Media Internet',
      'dependencies' => array('fake'), // @todo remove when File Entity > alpha3 is released. This test currently fails on drupal.org due to testbot dependency issues.
    );
  }

  function setUp() {
    parent::setUp();

    $web_user = $this->drupalCreateUser(array('access media browser', 'add media from remote sources'));
    $this->drupalLogin($web_user);
  }

  /**
   * Tests that the views sorting works on the media browser 'Library' tab.
   */
  function testMediaBrowserWebTab() {
    // Load only the 'Library' tab of the media browser.
    $options = array(
      'query' => array(
        'enabledPlugins' => array(
          'media_internet' => 'media_internet',
        ),
      ),
    );

    $this->drupalGet('media/browser', $options);
    $this->assertResponse(200);

    // Check that the web tab is available and has an 'embed code' field.
    $this->assertRaw(t('Web'), t('The web tab was found.'));
    $this->assertFieldByName('embed_code', '', t('Embed code form field found.'));
  }
}

/**
 * Test file creation through the file upload wizard with remote media.
 */
class MediaInternetCreationTestCase extends MediaInternetTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'Remote media file creation',
      'description' => 'Test file creation with remote media.',
      'group' => 'Media Internet',
      'dependencies' => array('fake'), // @todo remove when File Entity > alpha3 is released. This test currently fails on drupal.org due to testbot dependency issues.
    );
  }

  function setUp() {
    parent::setUp();

    $web_user = $this->drupalCreateUser(array('create files', 'add media from remote sources', 'edit own document files'));
    $this->drupalLogin($web_user);
  }

  /**
   * Tests file creation with remote media.
   */
  function testRemoteMediaFileCreation() {
    // Create a file.
    $edit = array();
    $edit['embed_code'] = file_create_url('README.txt');
    $this->drupalPost('file/add/web', $edit, t('Next'));

    // Step 2: Scheme selection
    if ($this->xpath('//input[@name="scheme"]')) {
      $this->drupalPost(NULL, array(), t('Next'));
    }

    // Check that the document file has been uploaded.
    $this->assertRaw(t('!type %name was uploaded.', array('!type' => 'Document', '%name' => 'README.txt')), t('Document file uploaded.'));

    // Check that the file exists in the database.
    $file = $this->getFileByFilename('README.txt');
    $this->assertTrue($file, t('File found in database.'));
  }
}

/**
 * Tests custom media provider APIs.
 */
class MediaInternetProviderTestCase extends MediaInternetTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'Custom media provider test',
      'description' => 'Tests the custom media provider APIs.',
      'group' => 'Media Internet',
      'dependencies' => array('fake'), // @todo remove when File Entity > alpha3 is released. This test currently fails on drupal.org due to testbot dependency issues.
    );
  }

  function setUp() {
    parent::setUp('media_internet_test');

    $web_user = $this->drupalCreateUser(array('access media browser', 'create files', 'add media from remote sources', 'edit own video files'));
    $this->drupalLogin($web_user);
  }

  /**
   * Tests file creation with a custom media provider.
   */
  function testFilesBrowserSort() {
    $this->drupalGet('file/add/web');
    $this->assertResponse(200);

    // Check that the provider is listed as supported.
    $supported_providers = 'Media Internet Test';
    $this->assertRaw(t('Supported internet media providers: !providers.', array('!providers' => '<strong>' . $supported_providers . '</strong>')), t('The example media provider is enabled.'));

    // Create a file.
    $edit = array();
    $edit['embed_code'] = 'http://www.example.com/video/123';
    $this->drupalPost('file/add/web', $edit, t('Next'));

    // Step 2: Scheme selection
    if ($this->xpath('//input[@name="scheme"]')) {
      $this->drupalPost(NULL, array(), t('Next'));
    }

    // Check that the video file has been uploaded.
    $this->assertRaw(t('!type %name was uploaded.', array('!type' => 'Video', '%name' => 'Drupal')), t('Video file uploaded.'));

    // Check that the file exists in the database.
    $file = $this->getFileByFilename('Drupal');
    $this->assertTrue($file, t('File found in database.'));
  }
}

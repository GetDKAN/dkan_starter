ahoyapi: v1
version: 0.0.0
commands:
  drupal-rebuild:
    usage: Remakes and reinstall site.
    cmd: |
      ahoy build update-data-starter
      ahoy site reinstall

  update:
    usage: Updates site USE THIS FOR ALL SITE UPDATES.
    cmd: |
      ARGS="{{args}}"
      if [[ -z "$ARGS" ]]; then
        echo "Please provide a Data Starter release (tag) as an argument. Exiting"
        exit 0
      fi
      ahoy build update-data-starter "$ARGS"
      ahoy build custom
      ahoy build overrides
      ahoy build config

  remake:
    usage: Rebuild all the dkan projects from the build.make file.
    cmd: |
      set -e
      AHOY_CMD_PROXY=''
      DIRNAME=${PWD##*/}
      # IF this is data_starter_private
      if [[ "$DIRNAME" == "data_starter_private" ]]; then
        # Building in a new directory
        # drush make is stupid, delete docroot_new just in case
        rm -rf docroot_new
        ahoy drush -y make build.make --no-recursion --no-cache --verbose docroot_new
        rm -rf docroot
        mv docroot_new docroot
        # Move dkan folder from docroot/profiles to base folder
        mv dkan dkan_old
        mv docroot/profiles/dkan ./
        ln -s ../../dkan docroot/profiles/dkan
        rm -rf dkan_old
        # No recursive prevents dkan build to happen. Run it now from dkan remake.
        ahoy dkan remake
      fi
      ahoy build overrides
      ahoy build custom
      ahoy build post-build
      ahoy build config

  custom:
    usage: Downloads 3rd party modules
    cmd: |
      if [ -f custom.make ]; then
        ahoy drush -y make --no-core --contrib-destination=contrib custom.make --no-recursion --no-cache --verbose
        mv contrib/modules/* docroot/sites/all/modules/contrib
        rm -rf contrib
      fi

  overrides:
    usage: Overrides drupal-org.make with overrides.make
    cmd: |
      if [ -f config/overrides.make ]; then
        cd nucivic-ahoy && composer install && cd ..
        ahoy cmd-proxy drush php-script nucivic-ahoy/.scripts/overrides.php
        // Check file exits and file not empty.
        if [ -e overriden_make.make ] && [ -s overriden_make.make ]; then
          rm -rf docroot/sites/all/modules/overrides
          mkdir -p docroot/sites/all/modules/overrides
          ahoy drush -y make --no-core --contrib-destination=overrides overriden_make.make --no-recursion --no-cache --verbose
          mv overrides/modules/* docroot/sites/all/modules/overrides
          rm -rf overrides
        fi
        rm -f overriden_make.make
      fi

  post-build:
    usage: Runs (what used to be buildmanager) post build commands.
    cmd: |
      # Remove dkan make overrides
      cd dkan; git checkout drupal-org.make; cd ..
      # Setup a folder for contrib modules and themes.
      mkdir -p docroot/sites/all/modules/contrib
      mkdir -p docroot/sites/all/themes/contrib
      # Replace the default .htaccess file with our own that includes a working non-www to www example for acquia.
      if [ -f assets/.htaccess ]; then
        rm -rf docroot/.htaccess
        ln -s ../assets/.htaccess docroot/.htaccess
      fi
      # Replace sites/default with our own sites/default outside of the drupal root.
      rm -rf docroot/sites/default;
      ln -s ../../assets/sites/default docroot/sites/default
      # Clean out any .gitignore files imported from other modules, libraries, and profiles.
      find dkan -type f -name .gitignore -exec rm -rf {} \;
      find dkan -type d -name .git -exec rm -rf {} \;
      find docroot/sites/all -type f -name .gitignore -exec rm -rf {} \;
      find docroot/sites/all -type d -name .git -exec rm -rf {} \;
      # Clean out any CHANGELOG.txt files.
      find . -type f -name CHANGELOG.txt -exec rm -rf {} \;
      # Setup custom modules folder outside of the drupal root.
      rm -rf docroot/sites/all/modules/custom
      rm -rf docroot/sites/all/modules/dkan_overrides
      rm -rf docroot/sites/all/modules/data_config
      ln -s ../../../../assets/modules/data_config docroot/sites/all/modules/data_config
      ln -s ../../../../config/modules/custom docroot/sites/all/modules/custom
      ln -s ../../../../config/modules/dkan_overrides docroot/sites/all/modules/dkan_overrides
      ln -s ../../../../config/themes/custom docroot/sites/all/themes/custom
      if [ "$(ahoy custom | grep post-build)" != '' ]
      then
        ahoy custom post-build
      fi
      ahoy site self-update

  config:
    usage: ahoy build config - Applies site specific changes stored in config.yml
    cmd: |
      eval $(ahoy parse config/config.yml)
      tempdir=$(mktemp -dt "$0")

      # Configure https settings.
      if [ "$default_https_everywhere" == "TRUE" ];
      then
        sed "s/#HOST/$default_hostname/g" config/templates/.htaccess.https.tpl > $tempdir/.htaccess.https
        sed -e "/#HTTPS/r $tempdir/.htaccess.https" \
            -e "/#HTTPS/d" config/templates/.htaccess.tpl > $tempdir/.htaccess
      else
        sed -e "s/^#HTTPS$//g" config/templates/.htaccess.tpl > $tempdir/.htaccess
      fi

      cp $tempdir/.htaccess config/.htaccess

      # Transpose config.yml to php
      cd nucivic-ahoy
      composer install
      php .scripts/config.php

  new:
    usage: Sets new client site from data-starter
    cmd: |
      set -e
      AHOY_CMD_PROXY=''
      DIRNAME=${PWD##*/}
      if [[ "$DIRNAME" != "data_starter_private" ]]; then
        echo "This command should only be use from a data_starter_private working copy"
        exit 0
      fi
      cd ..
      if [ -d {{args}} ]; then
        ahoy confirm "{{args}} site folder alredy exists."
        echo ".. skipping installation"; exit 1;
      fi
      git clone 'git@github.com:NuCivic/data_starter_private.git' {{args}} --depth=1
      cd {{args}}
      rm -rf .git build.make build-dkan.make drupal-org-core.make
      echo "Site {{args}} initiated at ../{{args}}"
      git init .
      git add . -A
      git commit -m "{{args}} codebase setup"
      command -v hub >/dev/null 2>&1 || { echo >&2 "Hub not installed, please create repo, push code and create PR manually."; exit 1; }
      hub create -p NuCivic/{{args}}
      git push origin master
      echo "NuCivic/{{args}} Github repo created"

  dkan:
    usage: Upgrades/Downgrades dkan to a certain tag 'ahoy build dkan tag 7.x-1.10' or branch 'ahoy build dkan branch 7.x-1.x'. If no arguments are provided it outputs current dkan version.
    cmd: |
      set -e
      AHOY_CMD_PROXY=''
      EMPTY="{{args}}"
      if [[ -z "${EMPTY// }" ]]; then
        echo $(cat dkan/dkan.info | grep 'version' | cut -d '=' -f2 | sed 's/ //g')
        exit 0
      fi
      DIRNAME=${PWD##*/}
      if [[ "$DIRNAME" != "data_starter_private" ]]; then
        echo "This command should only be use to update data_starter_private. Run ahoy build update-data-starter instead"
        exit 0
      fi
      IFS=' ' read -r -a args <<< "{{args}}"
      tag_new=${args[0]}
      version_new=${args[1]}
      if [[ $tag_new != tag && $tag_new != branch ]]; then
        echo "First argument should be either 'tag' or 'branch'"
        exit 1
      fi
      tag_old='branch'
      version_old=$(awk -F " = " '/projects\[dkan\]\[download\]\[branch\]/ {print $2}' build-dkan.make)
      if grep -Fq "tag" build-dkan.make
      then
        tag_old='tag'
        version_old=$(awk -F " = " '/projects\[dkan\]\[download\]\[tag\]/ {print $2}' build-dkan.make)
      fi
      pr_branch="UPDATE_$tag_old-$version_old-TO-$tag_new-$version_new"
      if [[ `git branch | grep $pr_branch` ]]; then
        git branch -D "$pr_branch"
      fi
      git checkout -b "$pr_branch"
      sed "s/$tag_old/$tag_new/g" build-dkan.make > build-dkan.make.new; rm build-dkan.make; mv build-dkan.make.new build-dkan.make
      sed "s/$version_old/$version_new/g" build-dkan.make > build-dkan.make.new; rm build-dkan.make; mv build-dkan.make.new build-dkan.make
      if [ "$(ahoy custom | grep remake)" != '' ];
      then
        ahoy custom remake
      else
        ahoy build remake
      fi
      git add . -A
      git commit -m "Updates build-dkan.make from $tag_old $version_old to $tag_new $version_new"
      command -v hub >/dev/null 2>&1 || { echo >&2 "Hub not installed, please push code and create PR manually."; exit 1; }
      git push -f origin "$pr_branch";
      hub pull-request -m "Updates DKAN from $tag_old $version_old to $tag_new $version_new" >/dev/null 2>&1

  update-data-starter:
    usage: Updates data starter.
    cmd: |
      # It takes time to grab the entire repo. Checking out to git ignored hidden folder.
      if [ ! -d .data_starter_private ]; then
        git clone 'git@github.com:NuCivic/data_starter_private.git' .data_starter_private --depth=1
      fi
      mv config .config
      cd .data_starter_private
      git checkout master --force
      git reset --hard origin/master
      git fetch --tags
      ARGS="{{args}}"
      if [[ -z "$ARGS" ]]; then
        echo "Please provide a Data Starter release (tag) as an argument. Exiting"
        exit 0
      fi
      ARGS=`git tag | grep "$ARGS"`
      if [[ -z "$ARGS" ]]; then
        echo "You need to specify a valid Data Starter release (tag). Exiting"
        exit 0
      fi
      git checkout $ARGS
      cd ..
      rm -rf *
      # You can rsync now
      rsync -av --exclude=.git .data_starter_private/* ./
      rm -rf config
      mv .config config
      rm -rf .data_starter_private

ahoyapi: v1
version: 0.0.0
commands:
  setup:
    usage: Setups site settings
    cmd: |
      # Create an array with the arguments that were input.
      ARGS=( {{args}} )
      rm -f assets/sites/default/settings.docker.php
      rm -f assets/sites/default/settings.local.php
      ahoy cmd-proxy mkdir -p ~/.drush
      ahoy cmd-proxy 'find ./assets -type f -name "*aliases*php" -exec cp "{}" ~/.drush \;'

      if [ ! -f assets/sites/default/settings.php ] && [ -f assets/sites/default/default.settings.php ]; then
        cp assets/sites/default/default.settings.php assets/sites/default/settings.php
      fi

      if [ "$AHOY_CMD_PROXY" == "DOCKER" ]; then
        cp assets/sites/default/settings.docker.demo.php assets/sites/default/settings.docker.php
        ahoy docker up
      elif [ "${#ARGS[@]}" -ne 0  ]; then
        for i in "${ARGS[@]}"; do
          case "$i" in
            --db-user=*)
                    DB_USER="${i#*=}"
                    ;;
            --db-pass=*)
                    DB_PASS="${i#*=}"
                    ;;
            --db-host=*)
                    DB_HOST="${i#*=}"
                    ;;
            --db-port=*)
                    DB_PORT="${i#*=}"
                    ;;
            --db-name=*)
                    DB_NAME="${i#*=}"
                    ;;
            *)
                    echo "not recognized flag or param ${i#*=}"
                    exit 1
                    ;;
          esac
        done
        sed  \
        -e s/#DB_HOST/$DB_HOST/g \
        -e s/#DB_USER/$DB_USER/g \
        -e s/#DB_PASS/$DB_PASS/g \
        -e s/#DB_PORT/$DB_PORT/g \
        -e s/#DB_NAME/$DB_NAME/g \
        assets/sites/default/settings.local.demo.php > assets/sites/default/settings.local.php
        echo "A settings.local.php file was created at assets/sites/default/settings.local.php with your db credentials."
      else
        cp assets/sites/default/settings.local.demo.php assets/sites/default/settings.local.php
        echo "A settings.local.php file was created at assets/sites/default/settings.local.php, but you need you add your own db credentials."
      fi


  drupal-rebuild:
    usage: Remakes and reinstall site.
    cmd: |
      ahoy site remake
      ahoy site reinstall

  remake:
    usage: Rebuild all the dkan projects from the build.make file.
    cmd: |
      set -e
      TEMP=$AHOY_CMD_PROXY
      AHOY_CMD_PROXY=''
      # Building in a new directory
      ahoy drush -y make build.make --no-recursion --no-cache --verbose docroot_new
      rm -rf docroot
      mv docroot_new docroot
      # Move dkan folder from docroot/profiles to base folder
      mv dkan dkan_old
      mv docroot/profiles/dkan ./
      ln -s ../../dkan docroot/profiles/dkan
      rm -rf dkan_old
      # No recursive prevents dkan build to happen. Run it now from dkan remake.
      ahoy dkan remake
      ahoy site post-build
      AHOY_CMD_PROXY=$TEMP

  post-build:
    usage: Runs (what used to be buildmanager) post build commands.
    cmd: |
      # Setup a folder for contrib modules and themes.
      mkdir -p docroot/sites/all/modules/contrib
      mkdir -p docroot/sites/all/themes/contrib
      # Replace the default .htaccess file with our own that includes a working non-www to www example for acquia.
      if [ -f assets/.htaccess ]; then
        rm -rf docroot/.htaccess
        ln -s ../assets/.htaccess docroot/.htaccess
      fi
      # Replace sites/default with our own sites/default outside of the drupal root.
      rm -rf docroot/sites/default;
      ln -s ../../assets/sites/default docroot/sites/default
      # Clean out any .gitignore files imported from other modules, libraries, and profiles.
      find dkan -type f -name .gitignore -exec rm -rf {} \;
      find dkan -type d -name .git -exec rm -rf {} \;
      find docroot/sites/all -type f -name .gitignore -exec rm -rf {} \;
      find docroot/sites/all -type d -name .git -exec rm -rf {} \;
      # Clean out any CHANGELOG.txt files.
      find . -type f -name CHANGELOG.txt -exec rm -rf {} \;
      # Setup custom modules folder outside of the drupal root.
      rm -rf docroot/sites/all/modules/custom
      rm -rf docroot/sites/all/modules/dkan_overrides
      ln -s ../../../../projects/modules/custom docroot/sites/all/modules/custom
      ln -s ../../../../projects/modules/dkan_overrides docroot/sites/all/modules/dkan_overrides

  reinstall:
    usage: Reinstall the site from scratch (dkan + custom_config + environment).
    cmd: |
      ahoy dkan reinstall
      ahoy drush -y en custom_config environment devinci
      ahoy drush env-switch --force local

  new:
    usage: Sets new client site from data-starter
    cmd: |
      set -e
      cd ..
      if [ -d {{args}} ]; then
        ahoy confirm "{{args}} site folder alredy exists."
        echo ".. skipping installation"; exit 1;
      fi
      git clone 'git@github.com:NuCivic/data_starter_private.git' {{args}} --depth=1
      cd {{args}}
      rm -rf .git
      echo "Site {{args}} initiated at ../{{args}}"
      git init .
      git add . -A
      git commit -m "{{args}} codebase setup"
      command -v hub >/dev/null 2>&1 || { echo >&2 "Hub not installed, please create repo, push code and create PR manually."; exit 1; }
      hub create -p NuCivic/{{args}}
      git push origin master
      echo "NuCivic/{{args}} Github repo created"

  dkan:
    usage: Upgrades/Downgrades dkan to a certain tag 'ahoy site dkan tag 7.x-1.10' or branch 'ahoy site dkan branch 7.x-1.x'
    cmd: |
      IFS=' ' read -r -a args <<< "{{args}}"
      tag_new=${args[0]}
      version_new=${args[1]}
      if [[ $tag_new != tag && $tag_new != branch ]]; then
        echo "First argument should be either 'tag' or 'branch'"
        exit 1
      fi
      tag_old='branch'
      version_old=$(awk -F " = " '/projects\[dkan\]\[download\]\[branch\]/ {print $2}' build-dkan.make)
      if grep -Fq "tag" build-dkan.make
      then
        tag_old='tag'
        version_old=$(awk -F " = " '/projects\[dkan\]\[download\]\[tag\]/ {print $2}' build-dkan.make)
      fi
      pr_branch="UPDATE_$tag_old-$version_old-TO-$tag_new-$version_new"
      if [[ `git branch | grep $pr_branch` ]]; then
        git branch -D "$pr_branch"
      fi
      git checkout -b "$pr_branch"
      sed "s/$tag_old/$tag_new/g" build-dkan.make > build-dkan.make.new; rm build-dkan.make; mv build-dkan.make.new build-dkan.make
      sed "s/$version_old/$version_new/g" build-dkan.make > build-dkan.make.new; rm build-dkan.make; mv build-dkan.make.new build-dkan.make
      ahoy site remake
      git add . -A
      git commit -m "Updates build-dkan.make from $tag_old $version_old to $tag_new $version_new"      
      command -v hub >/dev/null 2>&1 || { echo >&2 "Hub not installed, please push code and create PR manually."; exit 1; }
      git push origin "$pr_branch";
      hub pull-request

  mysql-dump-sanitized:
    usage: Creates a dump of a sanitazed version of the site db
    cmd: |
      ahoy cmd-proxy exec mkdir -p backups
      ahoy drush sql-dump > backups/unsanitized.sql
      ahoy drush sql-cli < nucivic-ahoy/.mysqlscripts/sanitize.sql | grep -v concat > backups/truncate.sql
      ahoy drush sql-cli < backups/truncate.sql
      rm backups/truncate.sql
      ahoy drush sql-dump > backups/sanitized.sql
      ahoy drush -y sql-drop
      ahoy drush sql-cli < backups/unsanitized.sql

  name:
    usage: Utility function to determine the site name.
    cmd: |
      ahoy cmd-proxy php -f nucivic-ahoy/.scripts/site-name.php
    hide: true

  asset-download:
    usage: Download database and files assets from S3 to local backups folder.
    cmd: |
      ahoy site asset-download-db
      ahoy site asset-download-files
    hide: true

  asset-download-db:
    usage: Download files backup asset from S3 to local backups folder.
    cmd: |
      ahoy cmd-proxy exec mkdir -p backups
      site=$(ahoy site name)
      asset="https://s3.amazonaws.com/nucivic-data-backups-scrubbed/$site.prod.sanitized.sql.gz"
      perl nucivic-ahoy/.scripts/s3curl.pl --id local $asset > backups/sanitized.sql.gz
      echo ""
      echo "Unpacking the sanitized database."
      echo ""
      ahoy cmd-proxy gunzip backups/sanitized.sql.gz -f

  asset-download-files:
    usage: Download files backup asset from S3 to local backups folder.
    cmd: |
      ahoy cmd-proxy exec mkdir -p backups
      site=$(ahoy site name)
      asset="https://s3.amazonaws.com/nucivic-data-backups-scrubbed/$site.prod.files.tar.gz"
      perl nucivic-ahoy/.scripts/s3curl.pl --id local $asset > backups/$site.prod.files.tar.gz
      echo ""
      echo "Unpacking the files asset."
      echo ""
      ahoy cmd-proxy tar xvzf backups/$site.prod.files.tar.gz
    hide: true

  asset-upload:
    usage: Upload database and files assets to dedicated S3 bucket.
    cmd: |
      ahoy site asset-db-upload
      ahoy site asset-files-upload
    hide: true

  asset-upload-db:
    usage: Upload database asset to dedicated S3 bucket.
    cmd: echo "TODO:// Implement asset-upload-db feature."
    hide: true

  asset-upload-files:
    usage: Upload files asset to dedicated S3 bucket.
    cmd: echo "TODO:// Implement asset-upload-files feature."
    hide: true

  s3-setup:
    usage: Utility script for adding aws s3curl credentials.
    cmd: bash nucivic-ahoy/.scripts/s3-setup.sh
    hide: true

  self-update:
    usage: Utility function for self updating this repo.
    cmd: |
      rm -fR nucivic-ahoy
      git clone 'git@github.com:nucivic/nucivic-ahoy' --depth=1
      rm -rf nucivic-ahoy/.git
      rm -rf nucivic-ahoy/.gitignore
    hide: true

  files-link:
    usage: Links files.
    cmd: ahoy cmd-proxy ln -s ../../../$(ahoy site name).prod.files/files docroot/sites/default/files
    hide: true

  files-fix-permissions:
    usage: Fix the permissiosn for the files.
    cmd: |
      ahoy cmd-proxy mkdir -p docroot/sites/default/files
      ahoy cmd-proxy find docroot/sites/default/files/ -type d -exec 'chmod o+rwx {} \;'
      ahoy cmd-proxy find docroot/sites/default/files/ -type f -exec 'chmod o+rw {} \;'
    hide: true

  test:
    usage: Run the tests for site
    cmd: |
      # Store the arguments as a bash array.
      ARGS=( "{{args}}" )
      BEHAT_FOLDER=tests
      ALT_CONFIG_FILE="behat.local.yml"
      # Crazy bash to get rid of the carriage return. (docker issue)
      BEHAT_ENV=$(echo $(ahoy cmd-proxy printenv HOSTNAME) | tr -d "\r" )
      SKIP_COMPOSER_FLAG="--skip-composer"
      if [[ ! "${ARGS[@]}" == *"$SKIP_COMPOSER_FLAG"* ]]; then
        echo "Installing behat dependencies.."
        ahoy cmd-proxy "cd $BEHAT_FOLDER && composer install --prefer-source --no-interaction"
      else
        echo "Skipping composer install.."
        ARGS=( "${ARGS[@]/$SKIP_COMPOSER_FLAG}" )
      fi
      if [ -f "$BEHAT_FOLDER/$ALT_CONFIG_FILE" ]; then
        echo "Using $BEHAT_FOLDER/$ALT_CONFIG_FILE .."
        CONFIG=" -c $ALT_CONFIG_FILE"
      elif [ "$BEHAT_ENV" == "cli" ]; then
        echo "Using behat.docker.yml config .."
        CONFIG=" -c behat.docker.yml"
      elif [ "$CI" == "true" ]; then
        echo "Using behat.circleci.yml config .."
        CONFIG=" -c behat.circleci.yml"
      else
        echo "$BEHAT_ENV"
        echo "Using behat.yml .."
      fi
      ahoy cmd-proxy "cd $BEHAT_FOLDER && bin/behat $CONFIG ${ARGS[@]}"
